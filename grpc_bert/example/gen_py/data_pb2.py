# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: data.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='data.proto',
  package='example',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\ndata.proto\x12\x07\x65xample\"\'\n\x07Strings\x12\x0f\n\x07\x63ontent\x18\x01 \x01(\t\x12\x0b\n\x03len\x18\x02 \x01(\x05\"\x1f\n\rEncodedVector\x12\x0e\n\x06vector\x18\x01 \x03(\x02\x32M\n\x0eStrings2Vector\x12;\n\rStringEncoder\x12\x10.example.Strings\x1a\x16.example.EncodedVector\"\x00\x62\x06proto3')
)




_STRINGS = _descriptor.Descriptor(
  name='Strings',
  full_name='example.Strings',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='example.Strings.content', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='len', full_name='example.Strings.len', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=23,
  serialized_end=62,
)


_ENCODEDVECTOR = _descriptor.Descriptor(
  name='EncodedVector',
  full_name='example.EncodedVector',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='vector', full_name='example.EncodedVector.vector', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=64,
  serialized_end=95,
)

DESCRIPTOR.message_types_by_name['Strings'] = _STRINGS
DESCRIPTOR.message_types_by_name['EncodedVector'] = _ENCODEDVECTOR
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Strings = _reflection.GeneratedProtocolMessageType('Strings', (_message.Message,), dict(
  DESCRIPTOR = _STRINGS,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:example.Strings)
  ))
_sym_db.RegisterMessage(Strings)

EncodedVector = _reflection.GeneratedProtocolMessageType('EncodedVector', (_message.Message,), dict(
  DESCRIPTOR = _ENCODEDVECTOR,
  __module__ = 'data_pb2'
  # @@protoc_insertion_point(class_scope:example.EncodedVector)
  ))
_sym_db.RegisterMessage(EncodedVector)



_STRINGS2VECTOR = _descriptor.ServiceDescriptor(
  name='Strings2Vector',
  full_name='example.Strings2Vector',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=97,
  serialized_end=174,
  methods=[
  _descriptor.MethodDescriptor(
    name='StringEncoder',
    full_name='example.Strings2Vector.StringEncoder',
    index=0,
    containing_service=None,
    input_type=_STRINGS,
    output_type=_ENCODEDVECTOR,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_STRINGS2VECTOR)

DESCRIPTOR.services_by_name['Strings2Vector'] = _STRINGS2VECTOR

# @@protoc_insertion_point(module_scope)
